//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\danie\Documents\Projects\OnTheFly\Fly.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FlyLang {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FlyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, NIL=20, FLOAT=21, INT=22, BOOL=23, STRING=24, ID=25, 
		ADD=26, SUB=27, MUL=28, DIV=29, EQ=30, NEQ=31, SM=32, LG=33, SMEQ=34, 
		LGEQ=35, WS=36, LINE_COMMENT=37, COMMENT=38;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_varAssignment = 2, RULE_importStatement = 3, 
		RULE_ifElse = 4, RULE_forLoop = 5, RULE_statementBlock = 6, RULE_methodDefinition = 7, 
		RULE_expression = 8, RULE_methodCall = 9, RULE_array = 10;
	public static readonly string[] ruleNames = {
		"program", "statement", "varAssignment", "importStatement", "ifElse", 
		"forLoop", "statementBlock", "methodDefinition", "expression", "methodCall", 
		"array"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'import'", "','", "'if'", "'{'", "'}'", "'elif'", 
		"'else'", "'for'", "'in'", "'box '", "'('", "')'", "'!'", "'is'", "'.'", 
		"'['", "']'", "'nil'", null, null, null, null, null, "'+'", "'-'", "'*'", 
		"'/'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NIL", "FLOAT", "INT", 
		"BOOL", "STRING", "ID", "ADD", "SUB", "MUL", "DIV", "EQ", "NEQ", "SM", 
		"LG", "SMEQ", "LGEQ", "WS", "LINE_COMMENT", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fly.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FlyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FlyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FlyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 22; statement();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__9) | (1L << T__11) | (1L << T__14) | (1L << T__17) | (1L << NIL) | (1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public VarAssignmentContext varAssignment() {
			return GetRuleContext<VarAssignmentContext>(0);
		}
		public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public IfElseContext ifElse() {
			return GetRuleContext<IfElseContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__14:
			case T__17:
			case NIL:
			case FLOAT:
			case INT:
			case BOOL:
			case STRING:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 31;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 27; varAssignment();
					}
					break;
				case 2:
					{
					State = 28; importStatement();
					}
					break;
				case 3:
					{
					State = 29; methodCall();
					}
					break;
				case 4:
					{
					State = 30; expression(0);
					}
					break;
				}
				State = 33; Match(T__0);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; forLoop();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 36; methodDefinition();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 37; ifElse();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAssignmentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(FlyParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterVarAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitVarAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAssignmentContext varAssignment() {
		VarAssignmentContext _localctx = new VarAssignmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_varAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(ID);
			State = 41; Match(T__1);
			State = 42; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(FlyParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(FlyParser.ID, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(T__2);
			State = 45; Match(ID);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 46; Match(T__3);
				State = 47; Match(ID);
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseContext : ParserRuleContext {
		public ExpressionContext ifExpr;
		public StatementContext _statement;
		public IList<StatementContext> _if = new List<StatementContext>();
		public ExpressionContext _expression;
		public IList<ExpressionContext> _elifExpr = new List<ExpressionContext>();
		public StatementBlockContext _statementBlock;
		public IList<StatementBlockContext> _elifSb = new List<StatementBlockContext>();
		public IList<StatementContext> _else = new List<StatementContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public IfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterIfElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitIfElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseContext ifElse() {
		IfElseContext _localctx = new IfElseContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(T__4);
			State = 54; _localctx.ifExpr = expression(0);
			State = 55; Match(T__5);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__9) | (1L << T__11) | (1L << T__14) | (1L << T__17) | (1L << NIL) | (1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << ID))) != 0)) {
				{
				{
				State = 56; _localctx._statement = statement();
				_localctx._if.Add(_localctx._statement);
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62; Match(T__6);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 63; Match(T__7);
				State = 64; _localctx._expression = expression(0);
				_localctx._elifExpr.Add(_localctx._expression);
				{
				State = 65; _localctx._statementBlock = statementBlock();
				_localctx._elifSb.Add(_localctx._statementBlock);
				}
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case T__2:
			case T__4:
			case T__6:
			case T__9:
			case T__11:
			case T__14:
			case T__17:
			case NIL:
			case FLOAT:
			case INT:
			case BOOL:
			case STRING:
			case ID:
				{
				}
				break;
			case T__8:
				{
				State = 73; Match(T__8);
				State = 74; Match(T__5);
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__9) | (1L << T__11) | (1L << T__14) | (1L << T__17) | (1L << NIL) | (1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << ID))) != 0)) {
					{
					{
					State = 75; _localctx._statement = statement();
					_localctx._else.Add(_localctx._statement);
					}
					}
					State = 80;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 81; Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(FlyParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 10, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(T__9);
			{
			State = 85; Match(ID);
			State = 86; Match(T__10);
			State = 87; expression(0);
			}
			State = 89; Match(T__5);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__9) | (1L << T__11) | (1L << T__14) | (1L << T__17) | (1L << NIL) | (1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << ID))) != 0)) {
				{
				{
				State = 90; statement();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 96; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(T__5);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__9) | (1L << T__11) | (1L << T__14) | (1L << T__17) | (1L << NIL) | (1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << ID))) != 0)) {
				{
				{
				State = 99; statement();
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 105; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(FlyParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(FlyParser.ID, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_methodDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(T__11);
			State = 108; Match(ID);
			State = 109; Match(T__12);
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 110; Match(ID);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 111; Match(T__3);
					State = 112; Match(ID);
					}
					}
					State = 117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__13:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 121; Match(T__13);
			State = 122; Match(T__5);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__9) | (1L << T__11) | (1L << T__14) | (1L << T__17) | (1L << NIL) | (1L << FLOAT) | (1L << INT) | (1L << BOOL) | (1L << STRING) | (1L << ID))) != 0)) {
				{
				{
				State = 123; statement();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext left;
		public IToken unary;
		public ExpressionContext right;
		public IToken comp;
		public IToken op;
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode NIL() { return GetToken(FlyParser.NIL, 0); }
		public ITerminalNode INT() { return GetToken(FlyParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(FlyParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(FlyParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(FlyParser.STRING, 0); }
		public ITerminalNode ID() { return GetToken(FlyParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(FlyParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(FlyParser.NEQ, 0); }
		public ITerminalNode SM() { return GetToken(FlyParser.SM, 0); }
		public ITerminalNode LG() { return GetToken(FlyParser.LG, 0); }
		public ITerminalNode SMEQ() { return GetToken(FlyParser.SMEQ, 0); }
		public ITerminalNode LGEQ() { return GetToken(FlyParser.LGEQ, 0); }
		public ITerminalNode MUL() { return GetToken(FlyParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(FlyParser.DIV, 0); }
		public ITerminalNode ADD() { return GetToken(FlyParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(FlyParser.SUB, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 132; methodCall();
				}
				break;
			case 2:
				{
				State = 133; array();
				}
				break;
			case 3:
				{
				State = 134; Match(NIL);
				}
				break;
			case 4:
				{
				State = 135; Match(INT);
				}
				break;
			case 5:
				{
				State = 136; Match(FLOAT);
				}
				break;
			case 6:
				{
				State = 137; Match(BOOL);
				}
				break;
			case 7:
				{
				State = 138; Match(STRING);
				}
				break;
			case 8:
				{
				State = 139; Match(ID);
				}
				break;
			case 9:
				{
				State = 140; _localctx.unary = Match(T__14);
				State = 141; _localctx.right = expression(5);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 156;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 144;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 145; Match(T__15);
						State = 146; _localctx.right = expression(5);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 147;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 148;
						_localctx.comp = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << SM) | (1L << LG) | (1L << SMEQ) | (1L << LGEQ))) != 0)) ) {
							_localctx.comp = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 149; _localctx.right = expression(4);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 150;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 151;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 152; _localctx.right = expression(3);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 153;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 154;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 155; _localctx.right = expression(2);
						}
						break;
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(FlyParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(FlyParser.ID, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(ID);
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 162; Match(T__16);
				State = 163; Match(ID);
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 169; Match(T__12);
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
			case T__17:
			case NIL:
			case FLOAT:
			case INT:
			case BOOL:
			case STRING:
			case ID:
				{
				State = 170; expression(0);
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 171; Match(T__3);
					State = 172; expression(0);
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__13:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 181; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlyListener typedListener = listener as IFlyListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlyVisitor<TResult> typedVisitor = visitor as IFlyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 20, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(T__17);
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				{
				}
				break;
			case T__14:
			case T__17:
			case NIL:
			case FLOAT:
			case INT:
			case BOOL:
			case STRING:
			case ID:
				{
				State = 185; expression(0);
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 186; Match(T__3);
					State = 187; expression(0);
					}
					}
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 195; Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '(', '\xC8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x6', '\x2', '\x1A', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x1B', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\"', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x33', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x36', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '<', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '?', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x46', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', 'I', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'O', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'R', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', 'U', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '^', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x61', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', 'g', '\n', '\b', '\f', '\b', '\xE', '\b', 'j', '\v', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 't', '\n', '\t', '\f', 
		'\t', '\xE', '\t', 'w', '\v', '\t', '\x3', '\t', '\x5', '\t', 'z', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x7F', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x82', '\v', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\x91', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x9F', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\xA2', '\v', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\xA7', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\xAA', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', '\xB0', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\xB3', '\v', '\v', '\x3', '\v', '\x5', '\v', '\xB6', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\xBF', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\xC2', '\v', '\f', '\x5', '\f', '\xC4', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x2', '\x3', '\x12', '\r', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x2', '\x5', '\x3', 
		'\x2', ' ', '%', '\x3', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x1C', '\x1D', 
		'\x2', '\xDE', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x4', '(', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '*', '\x3', '\x2', '\x2', '\x2', '\b', 
		'.', '\x3', '\x2', '\x2', '\x2', '\n', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'V', '\x3', '\x2', '\x2', '\x2', '\xE', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'm', '\x3', '\x2', '\x2', '\x2', '\x12', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\x5', '\x4', '\x3', 
		'\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\"', '\x5', '\x6', '\x4', '\x2', '\x1E', '\"', '\x5', 
		'\b', '\x5', '\x2', '\x1F', '\"', '\x5', '\x14', '\v', '\x2', ' ', '\"', 
		'\x5', '\x12', '\n', '\x2', '!', '\x1D', '\x3', '\x2', '\x2', '\x2', '!', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\a', '\x3', '\x2', '\x2', '$', ')', '\x3', '\x2', 
		'\x2', '\x2', '%', ')', '\x5', '\f', '\a', '\x2', '&', ')', '\x5', '\x10', 
		'\t', '\x2', '\'', ')', '\x5', '\n', '\x6', '\x2', '(', '!', '\x3', '\x2', 
		'\x2', '\x2', '(', '%', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', 
		'\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', ')', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\a', '\x1B', '\x2', '\x2', '+', ',', '\a', 
		'\x4', '\x2', '\x2', ',', '-', '\x5', '\x12', '\n', '\x2', '-', '\a', 
		'\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x5', '\x2', '\x2', '/', 
		'\x34', '\a', '\x1B', '\x2', '\x2', '\x30', '\x31', '\a', '\x6', '\x2', 
		'\x2', '\x31', '\x33', '\a', '\x1B', '\x2', '\x2', '\x32', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\t', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\a', '\x2', '\x2', '\x38', 
		'\x39', '\x5', '\x12', '\n', '\x2', '\x39', '=', '\a', '\b', '\x2', '\x2', 
		':', '<', '\x5', '\x4', '\x3', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '?', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', 
		'?', '=', '\x3', '\x2', '\x2', '\x2', '@', 'G', '\a', '\t', '\x2', '\x2', 
		'\x41', '\x42', '\a', '\n', '\x2', '\x2', '\x42', '\x43', '\x5', '\x12', 
		'\n', '\x2', '\x43', '\x44', '\x5', '\xE', '\b', '\x2', '\x44', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\a', '\v', '\x2', '\x2', 'L', 'P', '\a', '\b', '\x2', 
		'\x2', 'M', 'O', '\x5', '\x4', '\x3', '\x2', 'N', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\a', '\t', '\x2', 
		'\x2', 'T', 'J', '\x3', '\x2', '\x2', '\x2', 'T', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'U', '\v', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\f', '\x2', 
		'\x2', 'W', 'X', '\a', '\x1B', '\x2', '\x2', 'X', 'Y', '\a', '\r', '\x2', 
		'\x2', 'Y', 'Z', '\x5', '\x12', '\n', '\x2', 'Z', '[', '\x3', '\x2', '\x2', 
		'\x2', '[', '_', '\a', '\b', '\x2', '\x2', '\\', '^', '\x5', '\x4', '\x3', 
		'\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\t', '\x2', '\x2', '\x63', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x64', 'h', '\a', '\b', '\x2', '\x2', 
		'\x65', 'g', '\x5', '\x4', '\x3', '\x2', '\x66', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', 
		'\t', '\x2', '\x2', 'l', '\xF', '\x3', '\x2', '\x2', '\x2', 'm', 'n', 
		'\a', '\xE', '\x2', '\x2', 'n', 'o', '\a', '\x1B', '\x2', '\x2', 'o', 
		'y', '\a', '\xF', '\x2', '\x2', 'p', 'u', '\a', '\x1B', '\x2', '\x2', 
		'q', 'r', '\a', '\x6', '\x2', '\x2', 'r', 't', '\a', '\x1B', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'z', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 
		'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 'p', '\x3', '\x2', '\x2', '\x2', 
		'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\a', '\x10', '\x2', '\x2', '|', '\x80', '\a', '\b', '\x2', 
		'\x2', '}', '\x7F', '\x5', '\x4', '\x3', '\x2', '~', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x82', '\x3', '\x2', '\x2', '\x2', '\x80', '~', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\a', '\t', '\x2', '\x2', '\x84', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\b', '\n', '\x1', '\x2', 
		'\x86', '\x91', '\x5', '\x14', '\v', '\x2', '\x87', '\x91', '\x5', '\x16', 
		'\f', '\x2', '\x88', '\x91', '\a', '\x16', '\x2', '\x2', '\x89', '\x91', 
		'\a', '\x18', '\x2', '\x2', '\x8A', '\x91', '\a', '\x17', '\x2', '\x2', 
		'\x8B', '\x91', '\a', '\x19', '\x2', '\x2', '\x8C', '\x91', '\a', '\x1A', 
		'\x2', '\x2', '\x8D', '\x91', '\a', '\x1B', '\x2', '\x2', '\x8E', '\x8F', 
		'\a', '\x11', '\x2', '\x2', '\x8F', '\x91', '\x5', '\x12', '\n', '\a', 
		'\x90', '\x85', '\x3', '\x2', '\x2', '\x2', '\x90', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x88', '\x3', '\x2', '\x2', '\x2', '\x90', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x93', '\f', '\x6', '\x2', '\x2', '\x93', '\x94', '\a', '\x12', 
		'\x2', '\x2', '\x94', '\x9F', '\x5', '\x12', '\n', '\a', '\x95', '\x96', 
		'\f', '\x5', '\x2', '\x2', '\x96', '\x97', '\t', '\x2', '\x2', '\x2', 
		'\x97', '\x9F', '\x5', '\x12', '\n', '\x6', '\x98', '\x99', '\f', '\x4', 
		'\x2', '\x2', '\x99', '\x9A', '\t', '\x3', '\x2', '\x2', '\x9A', '\x9F', 
		'\x5', '\x12', '\n', '\x5', '\x9B', '\x9C', '\f', '\x3', '\x2', '\x2', 
		'\x9C', '\x9D', '\t', '\x4', '\x2', '\x2', '\x9D', '\x9F', '\x5', '\x12', 
		'\n', '\x4', '\x9E', '\x92', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA8', '\a', '\x1B', 
		'\x2', '\x2', '\xA4', '\xA5', '\a', '\x13', '\x2', '\x2', '\xA5', '\xA7', 
		'\a', '\x1B', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xB5', '\a', '\xF', '\x2', '\x2', '\xAC', '\xB1', '\x5', '\x12', 
		'\n', '\x2', '\xAD', '\xAE', '\a', '\x6', '\x2', '\x2', '\xAE', '\xB0', 
		'\x5', '\x12', '\n', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x10', '\x2', '\x2', 
		'\xB8', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xC3', '\a', '\x14', 
		'\x2', '\x2', '\xBA', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xC0', 
		'\x5', '\x12', '\n', '\x2', '\xBC', '\xBD', '\a', '\x6', '\x2', '\x2', 
		'\xBD', '\xBF', '\x5', '\x12', '\n', '\x2', '\xBE', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xBF', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC6', '\a', '\x15', '\x2', '\x2', '\xC6', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x1B', '!', '(', '\x34', '=', 'G', 'P', 'T', '_', 
		'h', 'u', 'y', '\x80', '\x90', '\x9E', '\xA0', '\xA8', '\xB1', '\xB5', 
		'\xC0', '\xC3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FlyLang
